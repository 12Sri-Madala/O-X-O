import { ITimberLog, ITimberOptions, Context, LogLevel, Middleware, Sync } from "@timberio/types";
declare type Message = string | Error;
/**
 * Timber core class for logging to the Timber.io service
 */
declare class Timber {
    protected _apiKey: string;
    protected _sourceKey: string;
    protected _options: ITimberOptions;
    protected _batch: any;
    protected _middleware: Middleware[];
    protected _sync?: Sync;
    private _countLogged;
    private _countSynced;
    /**
     * Initializes a new Timber instance
     *
     * @param apiKey: string - Private API key for logging to Timber.io
     * @param options?: ITimberOptions - Optionally specify Timber options
     */
    constructor(apiKey: string, sourceKey: string, options?: Partial<ITimberOptions>);
    private getContextFromError;
    /**
     * Number of entries logged
     *
     * @returns number
     */
    readonly logged: number;
    /**
     * Number of log entries synced with Timber.io
     *
     * @returns number
     */
    readonly synced: number;
    /**
     * Log an entry, to be synced with Timber.io
     *
     * @param message: string - Log message
     * @param level (LogLevel) - Level to log at (debug|info|warn|error)
     * @param context: (Context) - Context (optional)
     * @returns Promise<ITimberLog> after syncing
     */
    log<TContext extends Context>(message: Message, level?: LogLevel, context?: TContext): Promise<ITimberLog & TContext>;
    /**
     *
     * Debug level log, to be synced with Timber.io
     *
     * @param message: string - Log message
     * @param context: (Pick<ITimberLog, "context">) - Context (optional)
     * @returns Promise<ITimberLog> after syncing
     */
    debug<TContext extends Context>(message: Message, context?: TContext): Promise<ITimberLog & TContext>;
    /**
     *
     * Info level log, to be synced with Timber.io
     *
     * @param message: string - Log message
     * @param context: (Pick<ITimberLog, "context">) - Context (optional)
     * @returns Promise<ITimberLog> after syncing
     */
    info<TContext extends Context>(message: Message, context?: TContext): Promise<ITimberLog & TContext>;
    /**
     *
     * Warning level log, to be synced with Timber.io
     *
     * @param message: string - Log message
     * @param context: (Pick<ITimberLog, "context">) - Context (optional)
     * @returns Promise<ITimberLog> after syncing
     */
    warn<TContext extends Context>(message: Message, context?: TContext): Promise<ITimberLog & TContext>;
    /**
     *
     * Warning level log, to be synced with Timber.io
     *
     * @param message: string - Log message
     * @param context: (Pick<ITimberLog, "context">) - Context (optional)
     * @returns Promise<ITimberLog> after syncing
     */
    error<TContext extends Context>(message: Message, context?: TContext): Promise<ITimberLog & TContext>;
    /**
     * Sets the sync method - i.e. the final step in the pipeline to get logs
     * over to Timber.io
     *
     * @param fn - Pipeline function to use as sync method
     */
    setSync(fn: Sync): void;
    /**
     * Add a middleware function to the logging pipeline
     *
     * @param fn - Function to add to the log pipeline
     * @returns void
     */
    use(fn: Middleware): void;
    /**
     * Remove a function from the pipeline
     *
     * @param fn - Pipeline function
     * @returns void
     */
    remove(fn: Middleware): void;
}
export default Timber;

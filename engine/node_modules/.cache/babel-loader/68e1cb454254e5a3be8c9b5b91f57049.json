{"ast":null,"code":"import { LOAD_DATABASE_LIST_SUCCESS, LOAD_DATABASE_LIST_FAILURE, LOAD_DATABASE_DATA_SUCCESS, LOAD_DATABASE_DATA_FAILURE } from \"./actionTypes\";\nexport function getDatabaseList(token) {\n  return dispatch => {\n    try {\n      fetch(\"/database\", {\n        headers: {\n          Authorization: \"Bearer \" + token\n        }\n      }).then(response => response.json()).then(responseJson => {\n        if (responseJson.success) {\n          dispatch(getDatabaseListSuccess(responseJson));\n        } else {\n          dispatch(getDatabaseListError(responseJson.error));\n        }\n      }).catch(error => console.log(\"Error getting the list of databases: \", error));\n    } catch (error) {\n      dispatch(getDatabaseListError(error));\n    }\n  };\n}\n\nfunction getDatabaseListSuccess(obj) {\n  return {\n    type: LOAD_DATABASE_LIST_SUCCESS,\n    payload: obj.dataTables\n  };\n}\n\nfunction getDatabaseListError(err) {\n  return {\n    type: LOAD_DATABASE_LIST_FAILURE,\n    payload: err\n  };\n}\n\nexport function loadDatabase(token, table, page, pageSize) {\n  return dispatch => {\n    try {\n      fetch(\"/database/tableName/\".concat(table, \"/\").concat(page, \"/\").concat(pageSize), {\n        headers: {\n          Authorization: \"Bearer \" + token\n        }\n      }).then(response => response.json()).then(responseJson => {\n        if (responseJson.success) {\n          dispatch(loadDatabaseSuccess(responseJson.data));\n        } else {\n          dispatch(loadDatabaseError(responseJson.error));\n        }\n      }).catch(error => console.log(\"Error getting the data of \".concat(table, \": \"), error));\n    } catch (error) {\n      dispatch(loadDatabaseError(error));\n    }\n  };\n}\n\nfunction loadDatabaseSuccess(obj) {\n  return {\n    type: LOAD_DATABASE_DATA_SUCCESS,\n    payload: obj\n  };\n}\n\nfunction loadDatabaseError(err) {\n  return {\n    type: LOAD_DATABASE_DATA_FAILURE,\n    payload: err\n  };\n}","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/Database/Redux/actions.ts"],"names":["LOAD_DATABASE_LIST_SUCCESS","LOAD_DATABASE_LIST_FAILURE","LOAD_DATABASE_DATA_SUCCESS","LOAD_DATABASE_DATA_FAILURE","getDatabaseList","token","dispatch","fetch","headers","Authorization","then","response","json","responseJson","success","getDatabaseListSuccess","getDatabaseListError","error","catch","console","log","obj","type","payload","dataTables","err","loadDatabase","table","page","pageSize","loadDatabaseSuccess","data","loadDatabaseError"],"mappings":"AAAA,SACCA,0BADD,EAECC,0BAFD,EAGCC,0BAHD,EAICC,0BAJD,QAKO,eALP;AAOA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAwC;AAC9C,SAAQC,QAAD,IAAmB;AACzB,QAAI;AACHC,MAAAA,KAAK,cAAc;AAClBC,QAAAA,OAAO,EAAE;AACRC,UAAAA,aAAa,EAAE,YAAYJ;AADnB;AADS,OAAd,CAAL,CAKEK,IALF,CAKOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALnB,EAMEF,IANF,CAMOG,YAAY,IAAI;AACrB,YAAIA,YAAY,CAACC,OAAjB,EAA0B;AACzBR,UAAAA,QAAQ,CAACS,sBAAsB,CAACF,YAAD,CAAvB,CAAR;AACA,SAFD,MAEO;AACNP,UAAAA,QAAQ,CAACU,oBAAoB,CAACH,YAAY,CAACI,KAAd,CAArB,CAAR;AACA;AACD,OAZF,EAaEC,KAbF,CAaQD,KAAK,IAAIE,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDH,KAArD,CAbjB;AAcA,KAfD,CAeE,OAAOA,KAAP,EAAc;AACfX,MAAAA,QAAQ,CAACU,oBAAoB,CAACC,KAAD,CAArB,CAAR;AACA;AACD,GAnBD;AAoBA;;AAED,SAASF,sBAAT,CAAgCM,GAAhC,EAA0C;AACzC,SAAO;AACNC,IAAAA,IAAI,EAAEtB,0BADA;AAENuB,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFP,GAAP;AAIA;;AAED,SAASR,oBAAT,CAA8BS,GAA9B,EAAwC;AACvC,SAAO;AACNH,IAAAA,IAAI,EAAErB,0BADA;AAENsB,IAAAA,OAAO,EAAEE;AAFH,GAAP;AAIA;;AAED,OAAO,SAASC,YAAT,CAAsBrB,KAAtB,EAAqCsB,KAArC,EAAoDC,IAApD,EAAkEC,QAAlE,EAAoF;AAC1F,SAAQvB,QAAD,IAAmB;AACzB,QAAI;AACHC,MAAAA,KAAK,+BAAwBoB,KAAxB,cAAiCC,IAAjC,cAAyCC,QAAzC,GAAqD;AACzDrB,QAAAA,OAAO,EAAE;AACRC,UAAAA,aAAa,EAAE,YAAYJ;AADnB;AADgD,OAArD,CAAL,CAKEK,IALF,CAKOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALnB,EAMEF,IANF,CAMOG,YAAY,IAAI;AACrB,YAAIA,YAAY,CAACC,OAAjB,EAA0B;AACzBR,UAAAA,QAAQ,CAACwB,mBAAmB,CAACjB,YAAY,CAACkB,IAAd,CAApB,CAAR;AACA,SAFD,MAEO;AACNzB,UAAAA,QAAQ,CAAC0B,iBAAiB,CAACnB,YAAY,CAACI,KAAd,CAAlB,CAAR;AACA;AACD,OAZF,EAaEC,KAbF,CAaQD,KAAK,IAAIE,OAAO,CAACC,GAAR,qCAAyCO,KAAzC,SAAoDV,KAApD,CAbjB;AAcA,KAfD,CAeE,OAAOA,KAAP,EAAc;AACfX,MAAAA,QAAQ,CAAC0B,iBAAiB,CAACf,KAAD,CAAlB,CAAR;AACA;AACD,GAnBD;AAoBA;;AAED,SAASa,mBAAT,CAA6BT,GAA7B,EAAuC;AACtC,SAAO;AACNC,IAAAA,IAAI,EAAEpB,0BADA;AAENqB,IAAAA,OAAO,EAAEF;AAFH,GAAP;AAIA;;AAED,SAASW,iBAAT,CAA2BP,GAA3B,EAAqC;AACpC,SAAO;AACNH,IAAAA,IAAI,EAAEnB,0BADA;AAENoB,IAAAA,OAAO,EAAEE;AAFH,GAAP;AAIA","sourcesContent":["import {\n\tLOAD_DATABASE_LIST_SUCCESS,\n\tLOAD_DATABASE_LIST_FAILURE,\n\tLOAD_DATABASE_DATA_SUCCESS,\n\tLOAD_DATABASE_DATA_FAILURE\n} from \"./actionTypes\"\n\nexport function getDatabaseList(token: string) {\n\treturn (dispatch: any) => {\n\t\ttry {\n\t\t\tfetch(`/database`, {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: \"Bearer \" + token\n\t\t\t\t}\n\t\t\t})\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(responseJson => {\n\t\t\t\t\tif (responseJson.success) {\n\t\t\t\t\t\tdispatch(getDatabaseListSuccess(responseJson));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatch(getDatabaseListError(responseJson.error));\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(error => console.log(\"Error getting the list of databases: \", error));\n\t\t} catch (error) {\n\t\t\tdispatch(getDatabaseListError(error));\n\t\t}\n\t}\n}\n\nfunction getDatabaseListSuccess(obj: any) {\n\treturn {\n\t\ttype: LOAD_DATABASE_LIST_SUCCESS,\n\t\tpayload: obj.dataTables\n\t}\n}\n\nfunction getDatabaseListError(err: any) {\n\treturn {\n\t\ttype: LOAD_DATABASE_LIST_FAILURE,\n\t\tpayload: err\n\t}\n}\n\nexport function loadDatabase(token: string, table: string, page: number, pageSize: number) {\n\treturn (dispatch: any) => {\n\t\ttry {\n\t\t\tfetch(`/database/tableName/${table}/${page}/${pageSize}`, {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: \"Bearer \" + token,\n\t\t\t\t},\n\t\t\t})\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(responseJson => {\n\t\t\t\t\tif (responseJson.success) {\n\t\t\t\t\t\tdispatch(loadDatabaseSuccess(responseJson.data));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatch(loadDatabaseError(responseJson.error));\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(error => console.log(`Error getting the data of ${table}: `, error));\n\t\t} catch (error) {\n\t\t\tdispatch(loadDatabaseError(error))\n\t\t}\n\t}\n}\n\nfunction loadDatabaseSuccess(obj: any) {\n\treturn {\n\t\ttype: LOAD_DATABASE_DATA_SUCCESS,\n\t\tpayload: obj\n\t}\n}\n\nfunction loadDatabaseError(err: any) {\n\treturn {\n\t\ttype: LOAD_DATABASE_DATA_FAILURE,\n\t\tpayload: err\n\t}\n}"]},"metadata":{},"sourceType":"module"}
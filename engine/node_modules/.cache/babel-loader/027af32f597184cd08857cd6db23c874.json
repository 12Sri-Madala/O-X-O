{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/oxo/engine/src/Pages/MatchList/MatchList.tsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './MatchList.css';\nimport { loadDriverMatches, loadOwnerMatches, makeMatch, loadDriversInfo, loadOwnersInfo } from \"./Redux/actions\";\nimport ExpandableRow from '../../Components/ExpandableRow';\nimport MUIDataTable from \"mui-datatables\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DatePicker from 'react-datepicker';\nlet selectedDriverIndex;\nlet selectedOwnerIndex;\n\nclass MatchList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onConnect = this.onConnect.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.dispatchLoadDriverMatches(this.state.date);\n    this.props.dispatchLoadOwnerMatches(this.state.date);\n  }\n\n  onDateChange(date) {\n    this.setState({\n      date: date\n    });\n    this.props.dispatchLoadDriverMatches(date);\n    this.props.dispatchLoadOwnerMatches(date);\n  }\n\n  onConnect() {\n    if (selectedOwnerIndex !== undefined && selectedDriverIndex !== undefined) {\n      const driverMatch = this.props.driverMatches[selectedDriverIndex];\n      const ownerMatch = this.props.ownerMatches[selectedOwnerIndex];\n      this.props.dispatchMakeMatch(driverMatch.id, ownerMatch.id, this.state.date);\n    }\n  }\n\n  render() {\n    const driverColumns = [{\n      name: \"status\",\n      label: \"Status\"\n    }, {\n      name: \"pickStart\",\n      label: \"Pickup Start\"\n    }, {\n      name: \"pickEnd\",\n      label: \"Pickup End\"\n    }, {\n      name: \"dropStart\",\n      label: \"Dropoff Start\"\n    }, {\n      name: \"dropEnd\",\n      label: \"Dropoff End\"\n    }, {\n      name: \"driverID\",\n      label: \"Driver ID\"\n    }];\n    const ownerColumns = [{\n      name: \"status\",\n      label: \"Status\"\n    }, {\n      name: \"pickupTime\",\n      label: \"Pickup Time\"\n    }, {\n      name: \"dropoffTime\",\n      label: \"Dropoff Time\"\n    }, {\n      name: \"pickupLocation\",\n      label: \"Pickup Spot\"\n    }, {\n      name: \"dropoffLocation\",\n      label: \"Dropoff Spot\"\n    }, {\n      name: \"ownerID\",\n      label: \"Owner ID\"\n    }];\n    const driverTableOptions = {\n      filterType: 'checkbox',\n      selectableRows: 'single',\n      responsive: 'scrollFullHeight',\n      pagination: false,\n      print: false,\n      expandableRows: true,\n      onRowsSelect: currentRowsSelected => selectedDriverIndex = currentRowsSelected[0].index,\n      renderExpandableRow: rowData => {\n        if (this.props.driversInfo) {\n          const characteristics = [{\n            title: 'Name',\n            value: this.props.driversInfo[rowData[5]].firstName\n          }, {\n            title: 'Phone',\n            value: this.props.driversInfo[rowData[5]].phoneNumber\n          }, {\n            title: 'Stripe',\n            value: this.props.driversInfo[rowData[5]].customerID ? 'Yes' : 'No'\n          }, {\n            title: 'Checkr',\n            value: this.props.driversInfo[rowData[5]].checkr === 'Cleared' ? 'Cleared' : 'No'\n          }];\n          return React.createElement(ExpandableRow, {\n            characteristics: characteristics,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            },\n            __self: this\n          });\n        }\n\n        return null;\n      }\n    };\n    const ownerTableOptions = {\n      filterType: 'checkbox',\n      selectableRows: 'single',\n      responsive: 'scroll',\n      pagination: false,\n      print: false,\n      expandableRows: true,\n      onRowsSelect: currentRowsSelected => selectedOwnerIndex = currentRowsSelected[0].index,\n      renderExpandableRow: (rowData, rowMeta) => {\n        if (this.props.driversInfo) {\n          const characteristics = [{\n            title: 'Name',\n            value: this.props.ownersInfo[rowData[5]].firstName\n          }, {\n            title: 'Phone',\n            value: this.props.ownersInfo[rowData[5]].phoneNumber\n          }, {\n            title: 'Stripe',\n            value: this.props.ownersInfo[rowData[5]].accountId ? 'Yes' : 'No'\n          }, {\n            title: 'Vehicle',\n            value: this.props.ownerMatches[rowMeta.dataIndex].carID ? 'Yes' : 'No'\n          }];\n          return React.createElement(ExpandableRow, {\n            characteristics: characteristics,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          });\n        }\n\n        return null;\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"OXO Engine\"), React.createElement(\"div\", {\n      className: \"App-datepicker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      selected: this.state.date,\n      onChange: this.onDateChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"App-tables\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(MUIDataTable, {\n      title: \"Drivers\",\n      data: this.props.driverMatches,\n      columns: driverColumns,\n      options: driverTableOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), \"\\xA0\\xA0\", React.createElement(MUIDataTable, {\n      title: \"Owners\",\n      data: this.props.ownerMatches,\n      columns: ownerColumns,\n      options: ownerTableOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"App-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.onConnect,\n      style: {\n        backgroundColor: '#ff5252',\n        borderColor: '#fafafa',\n        paddingLeft: 15,\n        paddingRight: 15,\n        borderRadius: 10,\n        fontSize: 'x-large',\n        color: '#fafafa'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Match!\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    driverMatches: state.matches.driverMatches,\n    ownerMatches: state.matches.ownerMatches,\n    driversInfo: state.matches.driversInfo,\n    ownersInfo: state.matches.ownersInfo\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchLoadDriverMatches: date => dispatch(loadDriverMatches(date)),\n    dispatchLoadOwnerMatches: date => dispatch(loadOwnerMatches(date)),\n    dispatchMakeMatch: (driverMatchID, ownerMatchID, date) => dispatch(makeMatch(driverMatchID, ownerMatchID, date)),\n    dispatchLoadDriversInfo: driverIDs => dispatch(loadDriversInfo(driverIDs)),\n    dispatchLoadOwnersInfo: ownerIDs => dispatch(loadOwnersInfo(ownerIDs))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatchList);","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/MatchList/MatchList.tsx"],"names":["React","connect","loadDriverMatches","loadOwnerMatches","makeMatch","loadDriversInfo","loadOwnersInfo","ExpandableRow","MUIDataTable","DatePicker","selectedDriverIndex","selectedOwnerIndex","MatchList","Component","constructor","props","state","date","Date","onDateChange","bind","onConnect","componentDidMount","dispatchLoadDriverMatches","dispatchLoadOwnerMatches","setState","undefined","driverMatch","driverMatches","ownerMatch","ownerMatches","dispatchMakeMatch","id","render","driverColumns","name","label","ownerColumns","driverTableOptions","filterType","selectableRows","responsive","pagination","print","expandableRows","onRowsSelect","currentRowsSelected","index","renderExpandableRow","rowData","driversInfo","characteristics","title","value","firstName","phoneNumber","customerID","checkr","ownerTableOptions","rowMeta","ownersInfo","accountId","dataIndex","carID","backgroundColor","borderColor","paddingLeft","paddingRight","borderRadius","fontSize","color","mapStateToProps","matches","mapDispatchToProps","dispatch","driverMatchID","ownerMatchID","dispatchLoadDriversInfo","driverIDs","dispatchLoadOwnersInfo","ownerIDs"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './MatchList.css';\nimport { loadDriverMatches, loadOwnerMatches, makeMatch, loadDriversInfo, loadOwnersInfo } from \"./Redux/actions\";\nimport { driver, owner } from \"./types\";\nimport ExpandableRow from '../../Components/ExpandableRow';\n\nimport MUIDataTable, { MUIDataTableOptions } from \"mui-datatables\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DatePicker from 'react-datepicker';\n\n\ntype MatchListProps = {\n  driverMatches: [{ id: string }],\n  ownerMatches: [{ id: string, carID: string }],\n  driversInfo: { [key: string]: driver },\n  ownersInfo: { [key: string]: owner },\n  dispatchLoadDriverMatches: any,\n  dispatchLoadOwnerMatches: any,\n  dispatchMakeMatch: any,\n  dispatchLoadDriversInfo: any,\n  dispatchLoadOwnersInfo: any\n}\n\ntype MatchListState = {\n  date: Date,\n}\n\nlet selectedDriverIndex: number;\nlet selectedOwnerIndex: number;\n\nclass MatchList extends React.Component<MatchListProps, MatchListState> {\n\n  constructor(props: MatchListProps) {\n    super(props);\n    this.state = {\n      date: new Date(),\n    }\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onConnect = this.onConnect.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.dispatchLoadDriverMatches(this.state.date);\n    this.props.dispatchLoadOwnerMatches(this.state.date);\n  }\n\n  onDateChange(date: Date) {\n    this.setState({\n      date: date,\n    });\n    this.props.dispatchLoadDriverMatches(date);\n    this.props.dispatchLoadOwnerMatches(date);\n  }\n\n  onConnect() {\n    if (selectedOwnerIndex !== undefined && selectedDriverIndex !== undefined) {\n      const driverMatch = this.props.driverMatches[selectedDriverIndex];\n      const ownerMatch = this.props.ownerMatches[selectedOwnerIndex];\n      this.props.dispatchMakeMatch(driverMatch.id, ownerMatch.id, this.state.date);\n    }\n  }\n\n  render() {\n    const driverColumns = [\n      { name: \"status\", label: \"Status\" },\n      { name: \"pickStart\", label: \"Pickup Start\" },\n      { name: \"pickEnd\", label: \"Pickup End\" },\n      { name: \"dropStart\", label: \"Dropoff Start\" },\n      { name: \"dropEnd\", label: \"Dropoff End\" },\n      { name: \"driverID\", label: \"Driver ID\" },\n    ];\n\n    const ownerColumns = [\n      { name: \"status\", label: \"Status\" },\n      { name: \"pickupTime\", label: \"Pickup Time\" },\n      { name: \"dropoffTime\", label: \"Dropoff Time\" },\n      { name: \"pickupLocation\", label: \"Pickup Spot\" },\n      { name: \"dropoffLocation\", label: \"Dropoff Spot\" },\n      { name: \"ownerID\", label: \"Owner ID\" },\n    ];\n\n    const driverTableOptions: MUIDataTableOptions = {\n      filterType: 'checkbox',\n      selectableRows: 'single',\n      responsive: 'scrollFullHeight',\n      pagination: false,\n      print: false,\n      expandableRows: true,\n      onRowsSelect: currentRowsSelected => selectedDriverIndex = currentRowsSelected[0].index,\n      renderExpandableRow: (rowData) => {\n        if (this.props.driversInfo) {\n          const characteristics = [\n            { title: 'Name', value: this.props.driversInfo[rowData[5]].firstName },\n            { title: 'Phone', value: this.props.driversInfo[rowData[5]].phoneNumber },\n            { title: 'Stripe', value: this.props.driversInfo[rowData[5]].customerID ? 'Yes' : 'No' },\n            { title: 'Checkr', value: this.props.driversInfo[rowData[5]].checkr === 'Cleared' ? 'Cleared' : 'No' }\n          ];\n          return <ExpandableRow characteristics={characteristics} />\n        }\n        return null;\n      }\n    }\n    const ownerTableOptions: MUIDataTableOptions = {\n      filterType: 'checkbox',\n      selectableRows: 'single',\n      responsive: 'scroll',\n      pagination: false,\n      print: false,\n      expandableRows: true,\n      onRowsSelect: currentRowsSelected => selectedOwnerIndex = currentRowsSelected[0].index,\n      renderExpandableRow: (rowData, rowMeta) => {\n        if (this.props.driversInfo) {\n          const characteristics = [\n            { title: 'Name', value: this.props.ownersInfo[rowData[5]].firstName },\n            { title: 'Phone', value: this.props.ownersInfo[rowData[5]].phoneNumber },\n            { title: 'Stripe', value: this.props.ownersInfo[rowData[5]].accountId ? 'Yes' : 'No' },\n            { title: 'Vehicle', value: this.props.ownerMatches[rowMeta.dataIndex].carID ? 'Yes' : 'No' }\n          ];\n          return <ExpandableRow characteristics={characteristics} />\n        }\n        return null\n      }\n\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          OXO Engine\n      </div>\n        <div className='App-datepicker'>\n          <DatePicker\n            selected={this.state.date}\n            onChange={this.onDateChange}\n          />\n        </div>\n        <div className=\"App-tables\">\n          <MUIDataTable\n            title={\"Drivers\"}\n            data={this.props.driverMatches}\n            columns={driverColumns}\n            options={driverTableOptions}\n          />\n          &nbsp;&nbsp;\n      <MUIDataTable\n            title={\"Owners\"}\n            data={this.props.ownerMatches}\n            columns={ownerColumns}\n            options={ownerTableOptions}\n          />\n        </div>\n        <div className=\"App-footer\">\n          <button onClick={this.onConnect} style={{ backgroundColor: '#ff5252', borderColor: '#fafafa', paddingLeft: 15, paddingRight: 15, borderRadius: 10, fontSize: 'x-large', color: '#fafafa' }}>\n            Match!\n      </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    driverMatches: state.matches.driverMatches,\n    ownerMatches: state.matches.ownerMatches,\n    driversInfo: state.matches.driversInfo,\n    ownersInfo: state.matches.ownersInfo\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    dispatchLoadDriverMatches: (date: Date) => dispatch(loadDriverMatches(date)),\n    dispatchLoadOwnerMatches: (date: Date) => dispatch(loadOwnerMatches(date)),\n    dispatchMakeMatch: (driverMatchID: string, ownerMatchID: string, date: Date) => dispatch(makeMatch(driverMatchID, ownerMatchID, date)),\n    dispatchLoadDriversInfo: (driverIDs: string[]) => dispatch(loadDriversInfo(driverIDs)),\n    dispatchLoadOwnersInfo: (ownerIDs: string[]) => dispatch(loadOwnersInfo(ownerIDs))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatchList);\n"]},"metadata":{},"sourceType":"module"}
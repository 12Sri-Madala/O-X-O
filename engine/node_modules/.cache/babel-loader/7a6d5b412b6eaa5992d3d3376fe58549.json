{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/oxo/engine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/oxo/engine/src/Pages/Database/Database.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getDatabaseList } from \"./Redux/actions\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\nimport MUIDataTable from \"mui-datatables\";\n\nfunction Database(props) {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        databaseList = _useState2[0],\n        setList = _useState2[1];\n\n  const _useAuth = useAuth0(),\n        getTokenSilently = _useAuth.getTokenSilently;\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        token = _useState4[0],\n        setToken = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        refreshRequired = _useState6[0],\n        setRefreshRequired = _useState6[1];\n\n  useEffect(() => {\n    const fetchDatabaseList = async () => {\n      if (refreshRequired) {\n        const newToken = await getTokenSilently();\n        setToken(newToken);\n        props.dispatchDatabaseList(newToken);\n        setRefreshRequired(false);\n      }\n    };\n\n    fetchDatabaseList();\n  }, []);\n\n  const generateList = () => {\n    console.log('does it even hit the generate list?');\n    return databaseList.map(table => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, table);\n    });\n  };\n\n  const driverColumns = [{\n    name: \"status\",\n    label: \"Status\"\n  }, {\n    name: \"pickStart\",\n    label: \"Pickup Start\"\n  }, {\n    name: \"pickEnd\",\n    label: \"Pickup End\"\n  }, {\n    name: \"dropStart\",\n    label: \"Dropoff Start\"\n  }, {\n    name: \"dropEnd\",\n    label: \"Dropoff End\"\n  }, {\n    name: \"driverID\",\n    label: \"Driver ID\"\n  }];\n  const ownerColumns = [{\n    name: \"status\",\n    label: \"Status\"\n  }, {\n    name: \"pickupTime\",\n    label: \"Pickup Time\"\n  }, {\n    name: \"dropoffTime\",\n    label: \"Dropoff Time\"\n  }, {\n    name: \"pickupLocation\",\n    label: \"Pickup Spot\"\n  }, {\n    name: \"dropoffLocation\",\n    label: \"Dropoff Spot\"\n  }, {\n    name: \"ownerID\",\n    label: \"Owner ID\"\n  }];\n  const driverTableOptions = {\n    filterType: \"checkbox\",\n    selectableRows: \"single\",\n    pagination: false,\n    print: false,\n    expandableRows: true // onRowsSelect: currentRowsSelected =>\n    //     (selectedDriverIndex = currentRowsSelected[0].index)\n\n  };\n  const ownerTableOptions = {\n    filterType: \"checkbox\",\n    selectableRows: \"single\",\n    pagination: false,\n    print: false,\n    expandableRows: true // onRowsSelect: currentRowsSelected =>\n    //     (selectedOwnerIndex = currentRowsSelected[0].index)\n\n  };\n\n  const handleConnect = () => {// if (selectedOwnerIndex !== undefined && selectedDriverIndex !== undefined) {\n    //     const driverMatch = props.driverMatches[selectedDriverIndex];\n    //     const ownerMatch = props.ownerMatches[selectedOwnerIndex];\n    //     props.dispatchMakeMatch(driverMatch.id, ownerMatch.id, date, token);\n    //     setRefreshRequired(true);\n    // }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"App-datepicker\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"App-tables\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(MUIDataTable, {\n    title: \"Drivers\" // data={props.driverMatches}\n    ,\n    columns: driverColumns,\n    options: driverTableOptions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), \"\\xA0\\xA0\", React.createElement(MUIDataTable, {\n    title: \"Owners\" // data={props.ownerMatches}\n    ,\n    columns: ownerColumns,\n    options: ownerTableOptions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"App-footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: handleConnect,\n    style: {\n      backgroundColor: \"#ff5252\",\n      borderColor: \"#fafafa\",\n      paddingLeft: 15,\n      paddingRight: 15,\n      borderRadius: 10,\n      fontSize: \"x-large\",\n      color: \"#fafafa\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Match\")));\n}\n\nconst mapStateToProps = state => {\n  return {\n    databaseList: state.databaseList\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchDatabaseList: token => dispatch(getDatabaseList(token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Database);","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/Database/Database.tsx"],"names":["React","useState","useEffect","connect","getDatabaseList","useAuth0","MUIDataTable","Database","props","databaseList","setList","getTokenSilently","token","setToken","refreshRequired","setRefreshRequired","fetchDatabaseList","newToken","dispatchDatabaseList","generateList","console","log","map","table","driverColumns","name","label","ownerColumns","driverTableOptions","filterType","selectableRows","pagination","print","expandableRows","ownerTableOptions","handleConnect","backgroundColor","borderColor","paddingLeft","paddingRight","borderRadius","fontSize","color","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { getDatabaseList } from \"./Redux/actions\"\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\nimport MUIDataTable, { MUIDataTableOptions } from \"mui-datatables\";\nimport DatePicker from \"react-datepicker\";\n\ninterface DatabaseProps {\n    dispatchDatabaseList: any;\n}\n\nfunction Database(props: DatabaseProps): React.ReactElement {\n    const [databaseList, setList] = useState();\n    const { getTokenSilently } = useAuth0();\n    const [token, setToken] = useState();\n    const [refreshRequired, setRefreshRequired] = useState(true);\n\n    useEffect(() => {\n        const fetchDatabaseList = async () => {\n            if (refreshRequired) {\n                const newToken = await getTokenSilently();\n                setToken(newToken);\n                props.dispatchDatabaseList(newToken)\n                setRefreshRequired(false);\n            }\n        };\n        fetchDatabaseList();\n    }, []);\n\n    const generateList = () => {\n        console.log('does it even hit the generate list?')\n        return databaseList.map((table: string) => {\n            return (\n                <div\n                // onClick={getTable}\n                >{table}</div>\n            )\n        })\n    }\n\n    const driverColumns = [\n        { name: \"status\", label: \"Status\" },\n        { name: \"pickStart\", label: \"Pickup Start\" },\n        { name: \"pickEnd\", label: \"Pickup End\" },\n        { name: \"dropStart\", label: \"Dropoff Start\" },\n        { name: \"dropEnd\", label: \"Dropoff End\" },\n        { name: \"driverID\", label: \"Driver ID\" }\n    ];\n\n    const ownerColumns = [\n        { name: \"status\", label: \"Status\" },\n        { name: \"pickupTime\", label: \"Pickup Time\" },\n        { name: \"dropoffTime\", label: \"Dropoff Time\" },\n        { name: \"pickupLocation\", label: \"Pickup Spot\" },\n        { name: \"dropoffLocation\", label: \"Dropoff Spot\" },\n        { name: \"ownerID\", label: \"Owner ID\" }\n    ];\n\n    const driverTableOptions: MUIDataTableOptions = {\n        filterType: \"checkbox\",\n        selectableRows: \"single\",\n        pagination: false,\n        print: false,\n        expandableRows: true,\n        // onRowsSelect: currentRowsSelected =>\n        //     (selectedDriverIndex = currentRowsSelected[0].index)\n    };\n    const ownerTableOptions: MUIDataTableOptions = {\n        filterType: \"checkbox\",\n        selectableRows: \"single\",\n        pagination: false,\n        print: false,\n        expandableRows: true,\n        // onRowsSelect: currentRowsSelected =>\n        //     (selectedOwnerIndex = currentRowsSelected[0].index)\n    };\n\n    const handleConnect = () => {\n        // if (selectedOwnerIndex !== undefined && selectedDriverIndex !== undefined) {\n        //     const driverMatch = props.driverMatches[selectedDriverIndex];\n        //     const ownerMatch = props.ownerMatches[selectedOwnerIndex];\n        //     props.dispatchMakeMatch(driverMatch.id, ownerMatch.id, date, token);\n        //     setRefreshRequired(true);\n        // }\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-datepicker\">\n                {/* <DatePicker selected={date} onChange={date => setDate(date)} /> */}\n            </div>\n            <div className=\"App-tables\">\n                <MUIDataTable\n                    title={\"Drivers\"}\n                    // data={props.driverMatches}\n                    columns={driverColumns}\n                    options={driverTableOptions}\n                />\n                &nbsp;&nbsp;\n          <MUIDataTable\n                    title={\"Owners\"}\n                    // data={props.ownerMatches}\n                    columns={ownerColumns}\n                    options={ownerTableOptions}\n                />\n            </div>\n            <div className=\"App-footer\">\n                <button\n                    onClick={handleConnect}\n                    style={{\n                        backgroundColor: \"#ff5252\",\n                        borderColor: \"#fafafa\",\n                        paddingLeft: 15,\n                        paddingRight: 15,\n                        borderRadius: 10,\n                        fontSize: \"x-large\",\n                        color: \"#fafafa\"\n                    }}\n                >\n                    Match\n          </button>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        databaseList: state.databaseList\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        dispatchDatabaseList: (token: string) => dispatch(getDatabaseList(token))\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Database);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { LOAD_DATABASE_LIST_SUCCESS, LOAD_DATABASE_LIST_FAILURE, LOAD_DATABASE_DATA_SUCCESS, LOAD_DATABASE_DATA_FAILURE } from \"./actionTypes\";\nexport function getDatabaseList(token) {\n  return dispatch => {\n    try {\n      fetch(\"/database\", {\n        headers: {\n          Authorization: \"Bearer \" + token\n        }\n      }).then(response => response.json()).then(responseJson => {\n        if (responseJson.success) {\n          dispatch(getDatabaseListSuccess(responseJson));\n        } else {\n          dispatch(getDatabaseListError(responseJson.error));\n        }\n      }).catch(error => console.log(\"Error getting the list of databases: \", error));\n    } catch (error) {\n      dispatch(getDatabaseListError(error));\n    }\n  };\n}\n\nfunction getDatabaseListSuccess(obj) {\n  return {\n    type: LOAD_DATABASE_LIST_SUCCESS,\n    payload: obj.dataTables\n  };\n}\n\nfunction getDatabaseListError(err) {\n  return {\n    type: LOAD_DATABASE_LIST_FAILURE,\n    payload: err\n  };\n}\n\nexport function loadDatabase(token, tableName, page, pageSize) {\n  return dispatch => {\n    try {\n      const pageNumber = JSON.parse(page);\n      const perPageSize = JSON.parse(pageSize);\n      console.log(\"what is the page after parse: \", pageNumber);\n      console.log(\"what is the pageSize: after parse\", perPageSize);\n      fetch('/database/tableName/:table/:page/:pageSize', {\n        headers: {\n          Authorization: \"Bearer \" + token,\n          table: tableName,\n          page: pageNumber,\n          pageSize: perPageSize\n        }\n      }).then(response => response.json()).then(responseJson => {\n        if (responseJson.success) {\n          console.log(\"what is the response.json from \");\n          dispatch(loadDatabaseSuccess(responseJson));\n        } else {\n          console.log(\"what is the response: \", responseJson);\n          dispatch(loadDatabaseError(responseJson.error));\n        }\n      }).catch(error => console.log(\"Error getting the data of \".concat(tableName, \": \"), error));\n    } catch (error) {\n      dispatch(loadDatabaseError(error));\n    }\n  };\n}\n\nfunction loadDatabaseSuccess(obj) {\n  return {\n    type: LOAD_DATABASE_DATA_SUCCESS,\n    payload: obj\n  };\n}\n\nfunction loadDatabaseError(err) {\n  return {\n    type: LOAD_DATABASE_DATA_FAILURE,\n    payload: err\n  };\n}","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/Database/Redux/actions.ts"],"names":["LOAD_DATABASE_LIST_SUCCESS","LOAD_DATABASE_LIST_FAILURE","LOAD_DATABASE_DATA_SUCCESS","LOAD_DATABASE_DATA_FAILURE","getDatabaseList","token","dispatch","fetch","headers","Authorization","then","response","json","responseJson","success","getDatabaseListSuccess","getDatabaseListError","error","catch","console","log","obj","type","payload","dataTables","err","loadDatabase","tableName","page","pageSize","pageNumber","JSON","parse","perPageSize","table","loadDatabaseSuccess","loadDatabaseError"],"mappings":"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","sourcesContent":["import {\n    LOAD_DATABASE_LIST_SUCCESS,\n    LOAD_DATABASE_LIST_FAILURE,\n    LOAD_DATABASE_DATA_SUCCESS,\n    LOAD_DATABASE_DATA_FAILURE\n} from \"./actionTypes\"\n\nexport function getDatabaseList(token: string) {\n    return (dispatch: any) => {\n        try {\n            fetch(`/database`, {\n                headers: {\n                    Authorization: \"Bearer \" + token\n                }\n            })\n                .then(response => response.json())\n                .then(responseJson => {\n                    if (responseJson.success) {\n                        dispatch(getDatabaseListSuccess(responseJson));\n                    } else {\n                        dispatch(getDatabaseListError(responseJson.error));\n                    }\n                })\n                .catch(error => console.log(\"Error getting the list of databases: \", error));\n        } catch (error) {\n            dispatch(getDatabaseListError(error));\n        }\n    }\n}\n\nfunction getDatabaseListSuccess(obj: any) {\n    return {\n        type: LOAD_DATABASE_LIST_SUCCESS,\n        payload: obj.dataTables\n    }\n}\n\nfunction getDatabaseListError(err: any) {\n    return {\n        type: LOAD_DATABASE_LIST_FAILURE,\n        payload: err\n    }\n}\n\nexport function loadDatabase(token: string, tableName: string, page: string, pageSize: string) {\n    return (dispatch: any) => {\n        try {\n            const pageNumber = JSON.parse(page)\n            const perPageSize = JSON.parse(pageSize)\n            console.log(\"what is the page after parse: \", pageNumber);\n            console.log(\"what is the pageSize: after parse\", perPageSize);\n            fetch('/database/tableName/:table/:page/:pageSize', {\n                headers: {\n                    Authorization: \"Bearer \" + token,\n                    table: tableName,\n                    page: pageNumber,\n                    pageSize: perPageSize\n                }\n            })\n                .then(response => response.json())\n                .then(responseJson => {\n                    if (responseJson.success) {\n                        console.log(\"what is the response.json from \")\n                        dispatch(loadDatabaseSuccess(responseJson));\n                    } else {\n                        console.log(\"what is the response: \", responseJson)\n                        dispatch(loadDatabaseError(responseJson.error));\n                    }\n                })\n                .catch(error => console.log(`Error getting the data of ${tableName}: `, error));\n        } catch (error) {\n            dispatch(loadDatabaseError(error))\n        }\n    }\n}\n\nfunction loadDatabaseSuccess(obj: any) {\n    return {\n        type: LOAD_DATABASE_DATA_SUCCESS,\n        payload: obj\n    }\n}\n\nfunction loadDatabaseError(err: any) {\n    return {\n        type: LOAD_DATABASE_DATA_FAILURE,\n        payload: err\n    }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/oxo/engine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/oxo/engine/src/Pages/Database/Table.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport MUIDataTable from \"mui-datatables\";\nimport { loadDatabase } from \"./Redux/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\nfunction Table(props) {\n  let history = useHistory();\n\n  const _useAuth = useAuth0(),\n        getTokenSilently = _useAuth.getTokenSilently;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        token = _useState2[0],\n        setToken = _useState2[1];\n\n  const urlIndex = props.location.pathname.lastIndexOf(\"/\") + 1;\n  const currentTable = props.location.pathname.slice(urlIndex);\n  useEffect(() => {\n    const fetchDatabaseList = async () => {\n      const newToken = await getTokenSilently();\n      setToken(newToken);\n      props.dispatchLoadDatabase(newToken, currentTable, \"1\", \"25\");\n    };\n\n    fetchDatabaseList();\n  }, []);\n  const driverColumns = [{\n    name: \"status\",\n    label: \"Status\"\n  }, {\n    name: \"pickStart\",\n    label: \"Pickup Start\"\n  }, {\n    name: \"pickEnd\",\n    label: \"Pickup End\"\n  }, {\n    name: \"dropStart\",\n    label: \"Dropoff Start\"\n  }, {\n    name: \"dropEnd\",\n    label: \"Dropoff End\"\n  }, {\n    name: \"driverID\",\n    label: \"Driver ID\"\n  }];\n  const ownerColumns = [{\n    name: \"status\",\n    label: \"Status\"\n  }, {\n    name: \"pickupTime\",\n    label: \"Pickup Time\"\n  }, {\n    name: \"dropoffTime\",\n    label: \"Dropoff Time\"\n  }, {\n    name: \"pickupLocation\",\n    label: \"Pickup Spot\"\n  }, {\n    name: \"dropoffLocation\",\n    label: \"Dropoff Spot\"\n  }, {\n    name: \"ownerID\",\n    label: \"Owner ID\"\n  }];\n  const driverTableOptions = {\n    filterType: \"checkbox\",\n    selectableRows: \"single\",\n    pagination: false,\n    print: false,\n    expandableRows: true,\n    onRowsSelect: currentRowsSelected => selectedDriverIndex = currentRowsSelected[0].index\n  };\n  const ownerTableOptions = {\n    filterType: \"checkbox\",\n    selectableRows: \"single\",\n    pagination: false,\n    print: false,\n    expandableRows: true,\n    onRowsSelect: currentRowsSelected => selectedOwnerIndex = currentRowsSelected[0].index\n  };\n\n  const populateTable = () => {\n    switch (currentTable) {\n      case \"connection\":\n        return React.createElement(MUIDataTable, {\n          title: \"Drivers\",\n          data: props.databaseEntries,\n          columns: driverColumns,\n          options: driverTableOptions,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        });\n\n      case \"driver\":\n      case \"match\":\n      case \"owner\":\n      case \"vehicle\":\n      case \"waitlist\":\n      default:\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  });\n}\n\nconst mapStateToProps = state => {\n  return {\n    databaseEntries: state.database.data\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchLoadDatabase: (token, tableName, page, pageSize) => dispatch(loadDatabase(token, tableName, page, pageSize))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/Database/Table.tsx"],"names":["React","useState","useEffect","connect","MUIDataTable","loadDatabase","useHistory","useAuth0","Table","props","history","getTokenSilently","token","setToken","urlIndex","location","pathname","lastIndexOf","currentTable","slice","fetchDatabaseList","newToken","dispatchLoadDatabase","driverColumns","name","label","ownerColumns","driverTableOptions","filterType","selectableRows","pagination","print","expandableRows","onRowsSelect","currentRowsSelected","selectedDriverIndex","index","ownerTableOptions","selectedOwnerIndex","populateTable","databaseEntries","mapStateToProps","state","database","data","mapDispatchToProps","dispatch","tableName","page","pageSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport MUIDataTable, { MUIDataTableOptions } from \"mui-datatables\";\nimport { loadDatabase } from \"./Redux/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\ninterface TableProps {\n    // uniqueColumns: any[];\n    // databaseList: any[];\n    databaseEntries: any[];\n    // dispatchDatabaseList: any;\n    dispatchLoadDatabase: any;\n    location: any;\n}\n\nfunction Table(props: TableProps): React.ReactElement {\n    let history = useHistory();\n    const { getTokenSilently } = useAuth0();\n    const [token, setToken] = useState();\n    const urlIndex = props.location.pathname.lastIndexOf(\"/\") + 1;\n    const currentTable = props.location.pathname.slice(urlIndex);\n\n    useEffect(() => {\n        const fetchDatabaseList = async () => {\n            const newToken = await getTokenSilently();\n            setToken(newToken);\n\n            props.dispatchLoadDatabase(newToken, currentTable, \"1\", \"25\");\n        };\n        fetchDatabaseList();\n    }, []);\n\n    const driverColumns = [\n        { name: \"status\", label: \"Status\" },\n        { name: \"pickStart\", label: \"Pickup Start\" },\n        { name: \"pickEnd\", label: \"Pickup End\" },\n        { name: \"dropStart\", label: \"Dropoff Start\" },\n        { name: \"dropEnd\", label: \"Dropoff End\" },\n        { name: \"driverID\", label: \"Driver ID\" }\n    ];\n\n    const ownerColumns = [\n        { name: \"status\", label: \"Status\" },\n        { name: \"pickupTime\", label: \"Pickup Time\" },\n        { name: \"dropoffTime\", label: \"Dropoff Time\" },\n        { name: \"pickupLocation\", label: \"Pickup Spot\" },\n        { name: \"dropoffLocation\", label: \"Dropoff Spot\" },\n        { name: \"ownerID\", label: \"Owner ID\" }\n    ];\n\n    const driverTableOptions: MUIDataTableOptions = {\n        filterType: \"checkbox\",\n        selectableRows: \"single\",\n        pagination: false,\n        print: false,\n        expandableRows: true,\n        onRowsSelect: currentRowsSelected =>\n            (selectedDriverIndex = currentRowsSelected[0].index)\n    };\n    const ownerTableOptions: MUIDataTableOptions = {\n        filterType: \"checkbox\",\n        selectableRows: \"single\",\n        pagination: false,\n        print: false,\n        expandableRows: true,\n        onRowsSelect: currentRowsSelected =>\n            (selectedOwnerIndex = currentRowsSelected[0].index)\n    };\n\n    const populateTable = () => {\n        switch (currentTable) {\n            case \"connection\":\n                return (\n                    <MUIDataTable\n                        title={\"Drivers\"}\n                        data={props.databaseEntries}\n                        columns={driverColumns}\n                        options={driverTableOptions}\n                    />\n                )\n            case \"driver\":\n            case \"match\":\n            case \"owner\":\n            case \"vehicle\":\n            case \"waitlist\":\n            default:\n        }\n    }\n\n\n\n    return (\n        <div>\n\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        databaseEntries: state.database.data\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        dispatchLoadDatabase: (token: string, tableName: string, page: string, pageSize: string) => dispatch(loadDatabase(token, tableName, page, pageSize))\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Table);"]},"metadata":{},"sourceType":"module"}
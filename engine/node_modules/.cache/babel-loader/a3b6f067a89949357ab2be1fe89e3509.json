{"ast":null,"code":"import { LOAD_DRIVER_MATCHES, LOAD_OWNER_MATCHES, MATCH_ERROR, LOAD_DRIVERS_INFO, LOAD_OWNERS_INFO } from \"./actionTypes\"; //Passing the token through could be something to remove in the future.\n\nexport function loadDriverMatches(date, token) {\n  return dispatch => {\n    fetch(\"/matches/matchlist/driver/\".concat(date), {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => response.json()).then(responseJson => {\n      if (responseJson.success) {\n        dispatch({\n          type: LOAD_DRIVER_MATCHES,\n          payload: responseJson.matches\n        });\n        const driverIDs = responseJson.matches.map(match => match.driverID); // dispatch(loadDriversInfo(driverIDs));\n      }\n    });\n  };\n}\nexport function loadOwnerMatches(date, token) {\n  return dispatch => {\n    fetch(\"/matches/matchlist/owner/\".concat(date), {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => response.json()).then(responseJson => {\n      if (responseJson.success) {\n        dispatch({\n          type: LOAD_OWNER_MATCHES,\n          payload: responseJson.matches\n        });\n        const ownerIDs = responseJson.matches.map(match => match.ownerID); // dispatch(loadOwnersInfo(ownerIDs));\n      }\n    });\n  };\n}\nexport function makeMatch(driverMatchID, ownerMatchID, date, token) {\n  return dispatch => {\n    fetch(\"/matches/makeMatch/\".concat(driverMatchID, \"/\").concat(ownerMatchID), {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => response.json()).then(responseJson => {\n      if (responseJson.success) {\n        dispatch(loadOwnerMatches(date, token));\n        dispatch(loadDriverMatches(date, token));\n      } else {\n        dispatch({\n          type: MATCH_ERROR,\n          payload: responseJson.error\n        });\n      }\n    });\n  };\n}\nexport function loadDriversInfo(driverIDs) {\n  return dispatch => {\n    fetch(\"/user/getDrivers/\".concat(driverIDs)).then(response => response.json()).then(responseJson => {\n      if (responseJson.success) {\n        dispatch({\n          type: LOAD_DRIVERS_INFO,\n          payload: responseJson.drivers\n        });\n      }\n    });\n  };\n}\nexport function loadOwnersInfo(ownerIDs) {\n  return dispatch => {\n    fetch(\"user/getOwners/\".concat(ownerIDs)).then(response => response.json()).then(responseJson => {\n      console.log(responseJson);\n\n      if (responseJson.success) {\n        dispatch({\n          type: LOAD_OWNERS_INFO,\n          payload: responseJson.owners\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/MatchList/Redux/actions.ts"],"names":["LOAD_DRIVER_MATCHES","LOAD_OWNER_MATCHES","MATCH_ERROR","LOAD_DRIVERS_INFO","LOAD_OWNERS_INFO","loadDriverMatches","date","token","dispatch","fetch","headers","Authorization","then","response","json","responseJson","success","type","payload","matches","driverIDs","map","match","driverID","loadOwnerMatches","ownerIDs","ownerID","makeMatch","driverMatchID","ownerMatchID","method","error","loadDriversInfo","drivers","loadOwnersInfo","console","log","owners"],"mappings":"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","sourcesContent":["import {\n  LOAD_DRIVER_MATCHES,\n  LOAD_OWNER_MATCHES,\n  MAKE_MATCH,\n  MATCH_ERROR,\n  LOAD_DRIVERS_INFO,\n  LOAD_OWNERS_INFO\n} from \"./actionTypes\";\n\n//Passing the token through could be something to remove in the future.\n\nexport function loadDriverMatches(date: Date, token: string) {\n  return (dispatch: any) => {\n    fetch(`/matches/matchlist/driver/${date}`, {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    })\n      .then(response => response.json())\n      .then(responseJson => {\n        if (responseJson.success) {\n          dispatch({\n            type: LOAD_DRIVER_MATCHES,\n            payload: responseJson.matches\n          });\n          const driverIDs = responseJson.matches.map(\n            (match: { driverID: string }) => match.driverID\n          );\n          // dispatch(loadDriversInfo(driverIDs));\n        }\n      });\n  };\n}\n\nexport function loadOwnerMatches(date: Date, token: string) {\n  return (dispatch: any) => {\n    fetch(`/matches/matchlist/owner/${date}`, {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    })\n      .then(response => response.json())\n      .then(responseJson => {\n        if (responseJson.success) {\n          dispatch({\n            type: LOAD_OWNER_MATCHES,\n            payload: responseJson.matches\n          });\n          const ownerIDs = responseJson.matches.map(\n            (match: { ownerID: string }) => match.ownerID\n          );\n          // dispatch(loadOwnersInfo(ownerIDs));\n        }\n      });\n  };\n}\n\nexport function makeMatch(\n  driverMatchID: string,\n  ownerMatchID: string,\n  date: Date,\n  token: string\n) {\n  return (dispatch: any) => {\n    fetch(`/matches/makeMatch/${driverMatchID}/${ownerMatchID}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    })\n      .then(response => response.json())\n      .then(responseJson => {\n        if (responseJson.success) {\n          dispatch(loadOwnerMatches(date, token));\n          dispatch(loadDriverMatches(date, token));\n        } else {\n          dispatch({\n            type: MATCH_ERROR,\n            payload: responseJson.error\n          });\n        }\n      });\n  };\n}\n\nexport function loadDriversInfo(driverIDs: string[]) {\n  return (dispatch: any) => {\n    fetch(`/user/getDrivers/${driverIDs}`)\n      .then(response => response.json())\n      .then(responseJson => {\n        if (responseJson.success) {\n          dispatch({\n            type: LOAD_DRIVERS_INFO,\n            payload: responseJson.drivers\n          });\n        }\n      });\n  };\n}\n\nexport function loadOwnersInfo(ownerIDs: string[]) {\n  return (dispatch: any) => {\n    fetch(`user/getOwners/${ownerIDs}`)\n      .then(response => response.json())\n      .then(responseJson => {\n        console.log(responseJson);\n        if (responseJson.success) {\n          dispatch({\n            type: LOAD_OWNERS_INFO,\n            payload: responseJson.owners\n          });\n        }\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
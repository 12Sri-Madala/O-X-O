{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/oxo/engine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/oxo/engine/src/Pages/Database/Database.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Database.css\";\nimport { getDatabaseList } from \"./Redux/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\nfunction Database(props) {\n  let history = useHistory();\n\n  const _useAuth = useAuth0(),\n        getTokenSilently = _useAuth.getTokenSilently;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        token = _useState2[0],\n        setToken = _useState2[1];\n\n  useEffect(() => {\n    const fetchDatabaseList = async () => {\n      const newToken = await getTokenSilently();\n      setToken(newToken);\n      console.log(\"what is the new token: \", newToken);\n      props.dispatchDatabaseList(newToken);\n    };\n\n    fetchDatabaseList();\n  }, []);\n\n  const generateList = () => {\n    return props.databaseList.map(table => {\n      let capitalLetter = table[0].toUpperCase();\n      let tableName = capitalLetter + table.slice(1);\n      return React.createElement(\"span\", {\n        key: table,\n        className: \"tableName\",\n        onClick: () => {\n          history.push(\"/table/\".concat(table));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, tableName);\n    });\n  }; // <Link\n  // \tkey={table}\n  // \tclassName=\"tableName\"\n  // \tto={`/table/${table}`}\n  // >\n  // \t{tableName}\n  // </Link>\n\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, generateList());\n}\n\nconst mapStateToProps = state => {\n  return {\n    databaseList: state.database.databaseList\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchDatabaseList: token => dispatch(getDatabaseList(token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Database);","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/Database/Database.tsx"],"names":["React","useState","useEffect","connect","getDatabaseList","useHistory","useAuth0","Database","props","history","getTokenSilently","token","setToken","fetchDatabaseList","newToken","console","log","dispatchDatabaseList","generateList","databaseList","map","table","capitalLetter","toUpperCase","tableName","slice","push","mapStateToProps","state","database","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,gBAAP;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAAeC,UAAf,QAAiC,kBAAjC;AACA,SAASC,QAAT,QAAyB,2BAAzB;;AAWA,SAASC,QAAT,CAAkBC,KAAlB,EAA4D;AAC3D,MAAIC,OAAO,GAAGJ,UAAU,EAAxB;;AAD2D,mBAE9BC,QAAQ,EAFsB;AAAA,QAEnDI,gBAFmD,YAEnDA,gBAFmD;;AAAA,oBAGjCT,QAAQ,EAHyB;AAAA;AAAA,QAGpDU,KAHoD;AAAA,QAG7CC,QAH6C;;AAK3DV,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMW,iBAAiB,GAAG,YAAY;AACrC,YAAMC,QAAQ,GAAG,MAAMJ,gBAAgB,EAAvC;AACAE,MAAAA,QAAQ,CAACE,QAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,QAAvC;AACAN,MAAAA,KAAK,CAACS,oBAAN,CAA2BH,QAA3B;AACA,KALD;;AAMAD,IAAAA,iBAAiB;AACjB,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMK,YAAY,GAAG,MAAM;AAC1B,WAAOV,KAAK,CAACW,YAAN,CAAmBC,GAAnB,CAAwBC,KAAD,IAAmB;AAChD,UAAIC,aAAa,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASE,WAAT,EAApB;AACA,UAAIC,SAAS,GAAGF,aAAa,GAAGD,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAhC;AACA,aACC;AACC,QAAA,GAAG,EAAEJ,KADN;AAEC,QAAA,SAAS,EAAC,WAFX;AAGC,QAAA,OAAO,EAAE,MAAM;AAAEZ,UAAAA,OAAO,CAACiB,IAAR,kBAAuBL,KAAvB;AAAiC,SAHnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIEG,SAJF,CADD;AAOA,KAVM,CAAP;AAWA,GAZD,CAf2D,CA6B3D;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACC;AACC,IAAA,SAAS,EAAC,WADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGEN,YAAY,EAHd,CADD;AAOA;;AAED,MAAMS,eAAe,GAAIC,KAAD,IAAgB;AACvC,SAAO;AACNT,IAAAA,YAAY,EAAES,KAAK,CAACC,QAAN,CAAeV;AADvB,GAAP;AAGA,CAJD;;AAMA,MAAMW,kBAAkB,GAAIC,QAAD,IAAmB;AAC7C,SAAO;AACNd,IAAAA,oBAAoB,EAAGN,KAAD,IAAmBoB,QAAQ,CAAC3B,eAAe,CAACO,KAAD,CAAhB;AAD3C,GAAP;AAGA,CAJD;;AAMA,eAAeR,OAAO,CACrBwB,eADqB,EAErBG,kBAFqB,CAAP,CAGbvB,QAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./Database.css\"\nimport { getDatabaseList } from \"./Redux/actions\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\ninterface DatabaseProps {\n\tuniqueColumns: any[];\n\tdatabaseList: any[];\n\tdatabaseEntries: any[];\n\tdispatchDatabaseList: any;\n\tdispatchLoadDatabase: any;\n\n}\n\nfunction Database(props: DatabaseProps): React.ReactElement {\n\tlet history = useHistory();\n\tconst { getTokenSilently } = useAuth0();\n\tconst [token, setToken] = useState();\n\n\tuseEffect(() => {\n\t\tconst fetchDatabaseList = async () => {\n\t\t\tconst newToken = await getTokenSilently();\n\t\t\tsetToken(newToken);\n\t\t\tconsole.log(\"what is the new token: \", newToken)\n\t\t\tprops.dispatchDatabaseList(newToken)\n\t\t};\n\t\tfetchDatabaseList();\n\t}, []);\n\n\tconst generateList = () => {\n\t\treturn props.databaseList.map((table: string) => {\n\t\t\tlet capitalLetter = table[0].toUpperCase()\n\t\t\tlet tableName = capitalLetter + table.slice(1)\n\t\t\treturn (\n\t\t\t\t<span\n\t\t\t\t\tkey={table}\n\t\t\t\t\tclassName=\"tableName\"\n\t\t\t\t\tonClick={() => { history.push(`/table/${table}`) }}\n\t\t\t\t>{tableName}</span>\n\t\t\t)\n\t\t})\n\t}\n\n\t// <Link\n\t// \tkey={table}\n\t// \tclassName=\"tableName\"\n\t// \tto={`/table/${table}`}\n\t// >\n\t// \t{tableName}\n\t// </Link>\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"container\"\n\t\t>\n\t\t\t{generateList()}\n\t\t</div>\n\t)\n}\n\nconst mapStateToProps = (state: any) => {\n\treturn {\n\t\tdatabaseList: state.database.databaseList\n\t}\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tdispatchDatabaseList: (token: string) => dispatch(getDatabaseList(token))\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Database);"]},"metadata":{},"sourceType":"module"}
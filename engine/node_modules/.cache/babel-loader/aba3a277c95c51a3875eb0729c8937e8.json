{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/oxo/engine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/oxo/engine/src/Pages/Database/Database.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Database.css\";\nimport { getDatabaseList } from \"./Redux/actions\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\nfunction Database(props) {\n  // const [databaseList, setList] = useState([]);\n  const _useAuth = useAuth0(),\n        getTokenSilently = _useAuth.getTokenSilently;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        token = _useState2[0],\n        setToken = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        refreshRequired = _useState4[0],\n        setRefreshRequired = _useState4[1];\n\n  useEffect(() => {\n    const fetchDatabaseList = async () => {\n      if (refreshRequired) {\n        const newToken = await getTokenSilently();\n        setToken(newToken);\n        await props.dispatchDatabaseList(newToken);\n        setRefreshRequired(false);\n      }\n    };\n\n    fetchDatabaseList();\n  }, []);\n\n  const generateList = () => {\n    console.log('dataBaseLIst inside generateList', props.databaseList);\n    return props.databaseList.map(table => {\n      let capitalLetter = table[0].toUpperCase();\n      let tableName = capitalLetter + table.slice(1);\n      return React.createElement(\"h2\", {\n        key: table,\n        className: \"tableName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, tableName);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, generateList());\n}\n\nconst mapStateToProps = state => {\n  return {\n    databaseList: state.database.databaseList\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchDatabaseList: token => dispatch(getDatabaseList(token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Database);","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/Database/Database.tsx"],"names":["React","useState","useEffect","connect","getDatabaseList","useAuth0","Database","props","getTokenSilently","token","setToken","refreshRequired","setRefreshRequired","fetchDatabaseList","newToken","dispatchDatabaseList","generateList","console","log","databaseList","map","table","capitalLetter","toUpperCase","tableName","slice","mapStateToProps","state","database","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,gBAAP;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,QAAT,QAAyB,2BAAzB;;AAOA,SAASC,QAAT,CAAkBC,KAAlB,EAA4D;AACxD;AADwD,mBAE3BF,QAAQ,EAFmB;AAAA,QAEhDG,gBAFgD,YAEhDA,gBAFgD;;AAAA,oBAG9BP,QAAQ,EAHsB;AAAA;AAAA,QAGjDQ,KAHiD;AAAA,QAG1CC,QAH0C;;AAAA,qBAIVT,QAAQ,CAAC,IAAD,CAJE;AAAA;AAAA,QAIjDU,eAJiD;AAAA,QAIhCC,kBAJgC;;AAMxDV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,iBAAiB,GAAG,YAAY;AAClC,UAAIF,eAAJ,EAAqB;AACjB,cAAMG,QAAQ,GAAG,MAAMN,gBAAgB,EAAvC;AACAE,QAAAA,QAAQ,CAACI,QAAD,CAAR;AACA,cAAMP,KAAK,CAACQ,oBAAN,CAA2BD,QAA3B,CAAN;AACAF,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH;AACJ,KAPD;;AAQAC,IAAAA,iBAAiB;AACpB,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMG,YAAY,GAAG,MAAM;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDX,KAAK,CAACY,YAAtD;AAEA,WAAOZ,KAAK,CAACY,YAAN,CAAmBC,GAAnB,CAAwBC,KAAD,IAAmB;AAC7C,UAAIC,aAAa,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASE,WAAT,EAApB;AACA,UAAIC,SAAS,GAAGF,aAAa,GAAGD,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAhC;AACA,aACI;AACI,QAAA,GAAG,EAAEJ,KADT;AAEI,QAAA,SAAS,EAAC,WAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGEG,SAHF,CADJ;AAMH,KATM,CAAP;AAUH,GAbD;;AAeA,SACI;AACI,IAAA,SAAS,EAAC,WADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKR,YAAY,EAHjB,CADJ;AAOH;;AAED,MAAMU,eAAe,GAAIC,KAAD,IAAgB;AACpC,SAAO;AACHR,IAAAA,YAAY,EAAEQ,KAAK,CAACC,QAAN,CAAeT;AAD1B,GAAP;AAGH,CAJD;;AAMA,MAAMU,kBAAkB,GAAIC,QAAD,IAAmB;AAC1C,SAAO;AACHf,IAAAA,oBAAoB,EAAGN,KAAD,IAAmBqB,QAAQ,CAAC1B,eAAe,CAACK,KAAD,CAAhB;AAD9C,GAAP;AAGH,CAJD;;AAMA,eAAeN,OAAO,CAClBuB,eADkB,EAElBG,kBAFkB,CAAP,CAGbvB,QAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./Database.css\"\nimport { getDatabaseList } from \"./Redux/actions\"\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\ninterface DatabaseProps {\n    databaseList: any[];\n    dispatchDatabaseList: any;\n}\n\nfunction Database(props: DatabaseProps): React.ReactElement {\n    // const [databaseList, setList] = useState([]);\n    const { getTokenSilently } = useAuth0();\n    const [token, setToken] = useState();\n    const [refreshRequired, setRefreshRequired] = useState(true);\n\n    useEffect(() => {\n        const fetchDatabaseList = async () => {\n            if (refreshRequired) {\n                const newToken = await getTokenSilently();\n                setToken(newToken);\n                await props.dispatchDatabaseList(newToken)\n                setRefreshRequired(false);\n            }\n        };\n        fetchDatabaseList();\n    }, []);\n\n    const generateList = () => {\n        console.log('dataBaseLIst inside generateList', props.databaseList)\n\n        return props.databaseList.map((table: string) => {\n            let capitalLetter = table[0].toUpperCase()\n            let tableName = capitalLetter + table.slice(1)\n            return (\n                <h2\n                    key={table}\n                    className=\"tableName\"\n                >{tableName}</h2>\n            )\n        })\n    }\n\n    return (\n        <div\n            className=\"container\"\n        >\n            {generateList()}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        databaseList: state.database.databaseList\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        dispatchDatabaseList: (token: string) => dispatch(getDatabaseList(token))\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Database);"]},"metadata":{},"sourceType":"module"}
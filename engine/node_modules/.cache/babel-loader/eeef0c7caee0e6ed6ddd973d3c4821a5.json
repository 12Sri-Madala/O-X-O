{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/oxo/engine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/oxo/engine/src/Pages/Database/Database.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Database.css\";\nimport { getDatabaseList } from \"./Redux/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\nfunction Database(props) {\n  let history = useHistory();\n\n  const _useAuth = useAuth0(),\n        getTokenSilently = _useAuth.getTokenSilently;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        token = _useState2[0],\n        setToken = _useState2[1];\n\n  useEffect(() => {\n    const fetchDatabaseList = async () => {\n      const newToken = await getTokenSilently();\n      setToken(newToken);\n      console.log('what is the new token: ', newToken);\n      props.dispatchDatabaseList(newToken);\n    };\n\n    fetchDatabaseList();\n  }, []);\n\n  const generateList = () => {\n    return props.databaseList.map(table => {\n      let capitalLetter = table[0].toUpperCase();\n      let tableName = capitalLetter + table.slice(1);\n      return React.createElement(\"h2\", {\n        key: table,\n        className: \"tableName\",\n        onClick: () => {\n          // getTable(table)\n          history.push(\"/table/\".concat(table));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, tableName);\n    });\n  }; // const standardColumns = [\n  //     { name: \"status\", label: \"Status\" },\n  //     { name: \"id\", label: \"ID\" },\n  //     { name: \"pickEnd\", label: \"Pickup End\" },\n  //     { name: \"dropStart\", label: \"Dropoff Start\" },\n  //     { name: \"dropEnd\", label: \"Dropoff End\" },\n  // ];\n  // const dataColumns = [...standardColumns, ...props.uniqueColumns];\n  // const dataTableOptions: MUIDataTableOptions = {\n  //     filterType: \"checkbox\",\n  //     selectableRows: \"single\",\n  //     pagination: false,\n  //     print: false,\n  //     expandableRows: true,\n  //     onRowsSelect: currentRowsSelected =>\n  //         (selectedDriverIndex = currentRowsSelected[0].index)\n  // };\n  // const getTable = async (tableName: string) => {\n  //     let page: number = 1;\n  //     let pageSize: number = 25;\n  //     props.dispatchLoadDatabase(tableName, token, JSON.stringify(page), JSON.stringify(pageSize))\n  // return (\n  //     <MUIDataTable\n  //         title={tableName}\n  //         data={props.driverMatches}\n  //         columns={driverColumns}\n  //         options={driverTableOptions}\n  //     />\n  // )\n  // }\n\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, generateList());\n}\n\nconst mapStateToProps = state => {\n  return {\n    databaseList: state.database.databaseList,\n    databaseEntries: state.database.data\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchDatabaseList: token => dispatch(getDatabaseList(token)) // dispatchLoadDatabase: (tableName: string) => dispatch(loadDatabase(tableName))\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Database);","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/Database/Database.tsx"],"names":["React","useState","useEffect","connect","getDatabaseList","useHistory","useAuth0","Database","props","history","getTokenSilently","token","setToken","fetchDatabaseList","newToken","console","log","dispatchDatabaseList","generateList","databaseList","map","table","capitalLetter","toUpperCase","tableName","slice","push","mapStateToProps","state","database","databaseEntries","data","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,gBAAP;AACA,SAASC,eAAT,QAA8C,iBAA9C;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,2BAAzB;;AAWA,SAASC,QAAT,CAAkBC,KAAlB,EAA4D;AACxD,MAAIC,OAAO,GAAGJ,UAAU,EAAxB;;AADwD,mBAE3BC,QAAQ,EAFmB;AAAA,QAEhDI,gBAFgD,YAEhDA,gBAFgD;;AAAA,oBAG9BT,QAAQ,EAHsB;AAAA;AAAA,QAGjDU,KAHiD;AAAA,QAG1CC,QAH0C;;AAKxDV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,iBAAiB,GAAG,YAAY;AAClC,YAAMC,QAAQ,GAAG,MAAMJ,gBAAgB,EAAvC;AACAE,MAAAA,QAAQ,CAACE,QAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,QAAvC;AACAN,MAAAA,KAAK,CAACS,oBAAN,CAA2BH,QAA3B;AACH,KALD;;AAMAD,IAAAA,iBAAiB;AACpB,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMK,YAAY,GAAG,MAAM;AACvB,WAAOV,KAAK,CAACW,YAAN,CAAmBC,GAAnB,CAAwBC,KAAD,IAAmB;AAC7C,UAAIC,aAAa,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASE,WAAT,EAApB;AACA,UAAIC,SAAS,GAAGF,aAAa,GAAGD,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAhC;AACA,aACI;AACI,QAAA,GAAG,EAAEJ,KADT;AAEI,QAAA,SAAS,EAAC,WAFd;AAGI,QAAA,OAAO,EAAE,MAAM;AACX;AACAZ,UAAAA,OAAO,CAACiB,IAAR,kBAAuBL,KAAvB;AACH,SANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOEG,SAPF,CADJ;AAUH,KAbM,CAAP;AAcH,GAfD,CAfwD,CAgCxD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACI;AACI,IAAA,SAAS,EAAC,WADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKN,YAAY,EAHjB,CADJ;AAOH;;AAED,MAAMS,eAAe,GAAIC,KAAD,IAAgB;AACpC,SAAO;AACHT,IAAAA,YAAY,EAAES,KAAK,CAACC,QAAN,CAAeV,YAD1B;AAEHW,IAAAA,eAAe,EAAEF,KAAK,CAACC,QAAN,CAAeE;AAF7B,GAAP;AAIH,CALD;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,IAAmB;AAC1C,SAAO;AACHhB,IAAAA,oBAAoB,EAAGN,KAAD,IAAmBsB,QAAQ,CAAC7B,eAAe,CAACO,KAAD,CAAhB,CAD9C,CAEH;;AAFG,GAAP;AAIH,CALD;;AAOA,eAAeR,OAAO,CAClBwB,eADkB,EAElBK,kBAFkB,CAAP,CAGbzB,QAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./Database.css\"\nimport { getDatabaseList, loadDatabase } from \"./Redux/actions\";\nimport MUIDataTable, { MUIDataTableOptions } from \"mui-datatables\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\ninterface DatabaseProps {\n    uniqueColumns: any[];\n    databaseList: any[];\n    databaseEntries: any[];\n    dispatchDatabaseList: any;\n    dispatchLoadDatabase: any;\n\n}\n\nfunction Database(props: DatabaseProps): React.ReactElement {\n    let history = useHistory();\n    const { getTokenSilently } = useAuth0();\n    const [token, setToken] = useState();\n\n    useEffect(() => {\n        const fetchDatabaseList = async () => {\n            const newToken = await getTokenSilently();\n            setToken(newToken);\n            console.log('what is the new token: ', newToken)\n            props.dispatchDatabaseList(newToken)\n        };\n        fetchDatabaseList();\n    }, []);\n\n    const generateList = () => {\n        return props.databaseList.map((table: string) => {\n            let capitalLetter = table[0].toUpperCase()\n            let tableName = capitalLetter + table.slice(1)\n            return (\n                <h2\n                    key={table}\n                    className=\"tableName\"\n                    onClick={() => {\n                        // getTable(table)\n                        history.push(`/table/${table}`);\n                    }}\n                >{tableName}</h2>\n            )\n        })\n    }\n\n    // const standardColumns = [\n    //     { name: \"status\", label: \"Status\" },\n    //     { name: \"id\", label: \"ID\" },\n    //     { name: \"pickEnd\", label: \"Pickup End\" },\n    //     { name: \"dropStart\", label: \"Dropoff Start\" },\n    //     { name: \"dropEnd\", label: \"Dropoff End\" },\n    // ];\n\n    // const dataColumns = [...standardColumns, ...props.uniqueColumns];\n\n    // const dataTableOptions: MUIDataTableOptions = {\n    //     filterType: \"checkbox\",\n    //     selectableRows: \"single\",\n    //     pagination: false,\n    //     print: false,\n    //     expandableRows: true,\n    //     onRowsSelect: currentRowsSelected =>\n    //         (selectedDriverIndex = currentRowsSelected[0].index)\n    // };\n\n    // const getTable = async (tableName: string) => {\n    //     let page: number = 1;\n    //     let pageSize: number = 25;\n    //     props.dispatchLoadDatabase(tableName, token, JSON.stringify(page), JSON.stringify(pageSize))\n\n    // return (\n    //     <MUIDataTable\n    //         title={tableName}\n    //         data={props.driverMatches}\n    //         columns={driverColumns}\n    //         options={driverTableOptions}\n    //     />\n    // )\n    // }\n\n    return (\n        <div\n            className=\"container\"\n        >\n            {generateList()}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        databaseList: state.database.databaseList,\n        databaseEntries: state.database.data\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        dispatchDatabaseList: (token: string) => dispatch(getDatabaseList(token)),\n        // dispatchLoadDatabase: (tableName: string) => dispatch(loadDatabase(tableName))\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Database);"]},"metadata":{},"sourceType":"module"}
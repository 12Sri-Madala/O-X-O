{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/oxo/engine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/oxo/engine/src/Pages/Database/Table.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport MUIDataTable from \"mui-datatables\";\nimport { loadDatabase } from \"./Redux/actions\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\n// let selectedDriverIndex: number;\n// let selectedOwnerIndex: number;\n// let selectedConnectionindex: number;\n// let selectedVehicleIndex: number;\n// let selectedWaitlistIndex: number;\n// let selectedMatchIndex: number;\nfunction Table(props) {\n  // let history = useHistory();\n  const _useAuth = useAuth0(),\n        getTokenSilently = _useAuth.getTokenSilently;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        token = _useState2[0],\n        setToken = _useState2[1];\n\n  const urlIndex = props.location.pathname.lastIndexOf(\"/\") + 1;\n  const currentTable = props.location.pathname.slice(urlIndex);\n  useEffect(() => {\n    const fetchDatabaseList = async () => {\n      const newToken = await getTokenSilently();\n      setToken(newToken);\n      props.dispatchLoadDatabase(newToken, currentTable, 1, 1);\n    };\n\n    fetchDatabaseList();\n  }, []);\n  const driverColumns = [{\n    name: \"id\",\n    label: \"ID\"\n  }, {\n    name: \"firstName\",\n    label: \"First Name\"\n  }, {\n    name: \"lastName\",\n    label: \"Last Name\"\n  }, {\n    name: \"phoneNumber\",\n    label: \"Phone Number\"\n  }, {\n    name: \"email\",\n    label: \"Email\"\n  }, {\n    name: \"license\",\n    label: \"License\"\n  }, {\n    name: \"chekr\",\n    label: \"Background Check Status\"\n  }, {\n    name: \"chekrID\",\n    label: \"Background Check ID\"\n  }];\n  const ownerColumns = [{\n    name: \"id\",\n    label: \"ID\"\n  }, {\n    name: \"firstName\",\n    label: \"First Name\"\n  }, {\n    name: \"lastName\",\n    label: \"Last Name\"\n  }, {\n    name: \"phoneNumber\",\n    label: \"Phone Number\"\n  }, {\n    name: \"email\",\n    label: \"Email\"\n  }, {\n    name: \"vehicles\",\n    label: \"Vehicles\"\n  }, {\n    name: \"addresses\",\n    label: \"Addresses\"\n  }];\n  const driverTableOptions = {\n    filterType: \"checkbox\",\n    selectableRows: \"single\",\n    pagination: true,\n    print: false,\n    expandableRows: true\n  };\n  const ownerTableOptions = {\n    filterType: \"checkbox\",\n    selectableRows: \"single\",\n    pagination: true,\n    print: false,\n    expandableRows: true\n  };\n\n  const populateTable = () => {\n    console.log('what are the props: ', props);\n\n    switch (currentTable) {\n      case \"connection\": // return (\n      //     <MUIDataTable\n      //         title={\"Connection\"}\n      //         data={props.databaseEntries}\n      //         columns={}\n      //         options={}\n      //     />\n      // )\n\n      case \"driver\":\n        return React.createElement(MUIDataTable, {\n          title: \"Driver\",\n          data: props.databaseEntries,\n          columns: driverColumns,\n          options: driverTableOptions,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n\n      case \"match\": // return (\n      //     <MUIDataTable\n      //         title={\"Match\"}\n      //         data={props.databaseEntries}\n      //         columns={}\n      //         options={}\n      //     />\n      // )\n\n      case \"owner\":\n        return React.createElement(MUIDataTable, {\n          title: \"Owner\",\n          data: props.databaseEntries,\n          columns: ownerColumns,\n          options: ownerTableOptions,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        });\n\n      case \"vehicle\": // return (\n      //     <MUIDataTable\n      //         title={\"Vehicle\"}\n      //         data={props.databaseEntries}\n      //         columns={}\n      //         options={}\n      //     />\n      // )\n\n      case \"waitlist\": // return (\n      //     <MUIDataTable\n      //         title={\"Waitlist\"}\n      //         data={props.databaseEntries}\n      //         columns={}\n      //         options={}\n      //     />\n      // )\n\n      default:\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, populateTable());\n}\n\nconst mapStateToProps = state => {\n  return {\n    databaseEntries: state.database.databaseEntries\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchLoadDatabase: (token, tableName, page, pageSize) => dispatch(loadDatabase(token, tableName, page, pageSize))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);","map":{"version":3,"sources":["/Users/mac/Desktop/oxo/engine/src/Pages/Database/Table.tsx"],"names":["React","useState","useEffect","connect","MUIDataTable","loadDatabase","useAuth0","Table","props","getTokenSilently","token","setToken","urlIndex","location","pathname","lastIndexOf","currentTable","slice","fetchDatabaseList","newToken","dispatchLoadDatabase","driverColumns","name","label","ownerColumns","driverTableOptions","filterType","selectableRows","pagination","print","expandableRows","ownerTableOptions","populateTable","console","log","databaseEntries","mapStateToProps","state","database","mapDispatchToProps","dispatch","tableName","page","pageSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport MUIDataTable, { MUIDataTableOptions } from \"mui-datatables\";\nimport { loadDatabase } from \"./Redux/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth0 } from \"../../App/react-auth0-spa\";\n\ninterface TableProps {\n    // uniqueColumns: any[];\n    // databaseList: any[];\n    databaseEntries: any[];\n    // dispatchDatabaseList: any;\n    dispatchLoadDatabase: any;\n    location: any;\n}\n\n// let selectedDriverIndex: number;\n// let selectedOwnerIndex: number;\n// let selectedConnectionindex: number;\n// let selectedVehicleIndex: number;\n// let selectedWaitlistIndex: number;\n// let selectedMatchIndex: number;\n\nfunction Table(props: TableProps): React.ReactElement {\n    // let history = useHistory();\n    const { getTokenSilently } = useAuth0();\n    const [token, setToken] = useState();\n    const urlIndex = props.location.pathname.lastIndexOf(\"/\") + 1;\n    const currentTable = props.location.pathname.slice(urlIndex);\n\n    useEffect(() => {\n        const fetchDatabaseList = async () => {\n            const newToken = await getTokenSilently();\n            setToken(newToken);\n\n            props.dispatchLoadDatabase(newToken, currentTable, 1, 1);\n        };\n        fetchDatabaseList();\n    }, []);\n\n    const driverColumns = [\n        { name: \"id\", label: \"ID\" },\n        { name: \"firstName\", label: \"First Name\" },\n        { name: \"lastName\", label: \"Last Name\" },\n        { name: \"phoneNumber\", label: \"Phone Number\" },\n        { name: \"email\", label: \"Email\" },\n        { name: \"license\", label: \"License\" },\n        { name: \"chekr\", label: \"Background Check Status\" },\n        { name: \"chekrID\", label: \"Background Check ID\" }\n    ];\n\n    const ownerColumns = [\n        { name: \"id\", label: \"ID\" },\n        { name: \"firstName\", label: \"First Name\" },\n        { name: \"lastName\", label: \"Last Name\" },\n        { name: \"phoneNumber\", label: \"Phone Number\" },\n        { name: \"email\", label: \"Email\" },\n        { name: \"vehicles\", label: \"Vehicles\" },\n        { name: \"addresses\", label: \"Addresses\" },\n    ];\n\n\n\n    const driverTableOptions: MUIDataTableOptions = {\n        filterType: \"checkbox\",\n        selectableRows: \"single\",\n        pagination: true,\n        print: false,\n        expandableRows: true\n    };\n\n    const ownerTableOptions: MUIDataTableOptions = {\n        filterType: \"checkbox\",\n        selectableRows: \"single\",\n        pagination: true,\n        print: false,\n        expandableRows: true\n    };\n\n    const populateTable = () => {\n        console.log('what are the props: ', props)\n        switch (currentTable) {\n            case \"connection\":\n            // return (\n            //     <MUIDataTable\n            //         title={\"Connection\"}\n            //         data={props.databaseEntries}\n            //         columns={}\n            //         options={}\n            //     />\n            // )\n            case \"driver\":\n                return (\n                    <MUIDataTable\n                        title={\"Driver\"}\n                        data={props.databaseEntries}\n                        columns={driverColumns}\n                        options={driverTableOptions}\n                    />\n                )\n            case \"match\":\n            // return (\n            //     <MUIDataTable\n            //         title={\"Match\"}\n            //         data={props.databaseEntries}\n            //         columns={}\n            //         options={}\n            //     />\n            // )\n            case \"owner\":\n                return (\n                    <MUIDataTable\n                        title={\"Owner\"}\n                        data={props.databaseEntries}\n                        columns={ownerColumns}\n                        options={ownerTableOptions}\n                    />\n                )\n            case \"vehicle\":\n            // return (\n            //     <MUIDataTable\n            //         title={\"Vehicle\"}\n            //         data={props.databaseEntries}\n            //         columns={}\n            //         options={}\n            //     />\n            // )\n            case \"waitlist\":\n            // return (\n            //     <MUIDataTable\n            //         title={\"Waitlist\"}\n            //         data={props.databaseEntries}\n            //         columns={}\n            //         options={}\n            //     />\n            // )\n            default:\n        }\n    }\n\n\n\n    return (\n        <div>\n            {populateTable()}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        databaseEntries: state.database.databaseEntries\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        dispatchLoadDatabase: (token: string, tableName: string, page: number, pageSize: number) => dispatch(loadDatabase(token, tableName, page, pageSize))\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Table);"]},"metadata":{},"sourceType":"module"}
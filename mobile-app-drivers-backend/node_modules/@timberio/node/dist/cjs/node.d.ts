/// <reference types="node" />
import { Duplex, Writable } from "stream";
import { ITimberLog, Context, ITimberOptions, LogLevel } from "@timberio/types";
import { Base } from "@timberio/core";
export declare class Node extends Base {
    /**
     * Readable/Duplex stream where JSON stringified logs of type `ITimberLog`
     * will be pushed after syncing
     */
    private _writeStream?;
    constructor(apiKey: string, sourceKey: string, options?: Partial<ITimberOptions>);
    /**
     * Override `Base` log to enable Node.js streaming
     *
     * @param message: string - Log message
     * @param level (LogLevel) - Level to log at (debug|info|warn|error)
     * @param log: (Partial<ITimberLog>) - Initial log (optional)
     * @returns Promise<ITimberLog> after syncing
     */
    log<TContext extends Context>(message: string, level?: LogLevel, context?: TContext): Promise<ITimberLog & TContext>;
    /**
     * Pipe JSON stringified `ITimberLog` to a stream after syncing
     *
     * @param stream - Writable|Duplex stream
     */
    pipe(stream: Writable | Duplex): Writable | Duplex;
}
